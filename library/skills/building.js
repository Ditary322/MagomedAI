// models/MineCraft/library/skills/building.js

const pf = require('mineflayer-pathfinder');
const { Movements, goals } = pf;
const { GoalBlock } = goals;
const { findValidPosition } = require('../world/space');
const { log } = require('../../utils/logger');
const { handleItem } = require('../utils/itemHelper');
const { injectPathfinder } = require('../utils/navigation');

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –≤–µ–¥—ë—Ç –±–æ—Ç–∞ —Ç—É–¥–∞.
 * @param {import('mineflayer').Bot} bot
 * @param {number} width
 * @param {number} depth
 */
async function prepareBuild(bot, width = 5, depth = 5) {
  const area = findValidPosition(bot, width, depth);
  if (!area) {
    bot.chat("‚ùå –ù–µ –≤–∏–∂—É –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∑–æ–Ω—ã –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞.");
    return false;
  }
  const centerX = Math.floor((area.xMin + area.xMax) / 2);
  const centerZ = Math.floor((area.zMin + area.zMax) / 2);
  const y = Math.floor(bot.entity.position.y);

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º pathfinder –∏ –∏–¥—ë–º –≤ —Ü–µ–Ω—Ç—Ä –∑–æ–Ω—ã
  injectPathfinder(bot);
  await bot.pathfinder.goto(new GoalBlock(centerX, y, centerZ));

  log(bot, `‚úÖ –ó–æ–Ω–∞ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞: (${centerX}, ${y}, ${centerZ})`);
  return true;
}

/**
 * –°—Ç–∞–≤–∏—Ç –æ–¥–∏–Ω –±–ª–æ–∫ blockName –≤ —Ç–æ—á–∫–µ (x,y,z).
 * @param {import('mineflayer').Bot} bot
 * @param {string} blockName
 * @param {number} x
 * @param {number} y
 * @param {number} z
 */
async function placeBlock(bot, blockName, x, y, z) {
  const below = bot.blockAt(bot.vec3(x, y - 1, z));
  if (!below) {
    log(bot, `‚ùå –ù–µ—Ç –æ–ø–æ—Ä—ã –¥–ª—è ${blockName} –Ω–∞ (${x},${y},${z}).`);
    return false;
  }

  // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –±–ª–æ–∫ –∏ —ç–∫–∏–ø–∏—Ä—É–µ–º –µ–≥–æ
  const ok = await handleItem(bot, blockName, 1);
  if (!ok) {
    bot.chat(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫ ${blockName}`);
    return false;
  }
  const slot = bot.inventory.items().find(i => i.name === blockName);
  await bot.equip(slot, 'hand');

  // –ü–æ–¥—Ö–æ–¥–∏–º –∫ –º–µ—Å—Ç—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏
  injectPathfinder(bot);
  await bot.pathfinder.goto(new GoalBlock(below.position.x, below.position.y, below.position.z));

  try {
    await bot.placeBlock(below, bot.vec3(0, 1, 0));
    log(bot, `‚úÖ –ü–æ—Å—Ç–∞–≤–∏–ª ${blockName} –Ω–∞ (${x},${y},${z})`);
    return true;
  } catch (err) {
    log(bot, `‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ${blockName}: ${err.message}`);
    return false;
  }
}

/**
 * –°—Ç—Ä–æ–∏—Ç –∫–æ—Ä–æ–±–∫—É (–ø–æ–ª –∏ —Å—Ç–µ–Ω—ã) –∏–∑ material.
 * –¢–æ—á–∫–∞ (x,y,z) ‚Äî –æ–¥–∏–Ω –∏–∑ —É–≥–ª–æ–≤ –ø–æ–ª–∞.
 * –†–∞–∑–º–µ—Ä—ã width√óheight√ódepth.
 */
async function buildBox(bot, x, y, z, width = 5, height = 3, depth = 5, material = 'oak_planks') {
  // –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –±–ª–æ–∫–æ–≤ –Ω—É–∂–Ω–æ
  const needed = width * depth    // –ø–æ–ª
               + 2 * (width + depth) * (height - 1); // —Å—Ç–µ–Ω—ã –±–µ–∑ —É–≥–ª–æ–≤
  // –î–æ—Å—Ç–∞—ë–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å—Ä–∞–∑—É
  const ok = await handleItem(bot, material, needed);
  if (!ok) {
    bot.chat(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ${needed}√ó${material}`);
    return false;
  }

  log(bot, `üèóÔ∏è –°—Ç—Ä–æ—é –∫–æ—Ä–æ–±–∫—É ${width}√ó${height}√ó${depth} –∏–∑ ${material}`);

  // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ç–æ–∏–º –≤ –Ω–∞—á–∞–ª–µ –∑–æ–Ω—ã
  // (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å prepareBuild –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞)
  // await prepareBuild(bot, width, depth);

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º pathfinder –µ–¥–∏–Ω–æ–∂–¥—ã
  injectPathfinder(bot);

  // –ü–æ–ª
  for (let dx = 0; dx < width; dx++) {
    for (let dz = 0; dz < depth; dz++) {
      await placeBlock(bot, material, x + dx, y,     z + dz);
    }
  }
  // –°—Ç–µ–Ω—ã –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É
  for (let dy = 1; dy < height; dy++) {
    // –ø–æ X-—Å—Ç–µ–Ω–∞–º
    for (let dx = 0; dx < width; dx++) {
      await placeBlock(bot, material, x + dx, y + dy, z);
      await placeBlock(bot, material, x + dx, y + dy, z + depth - 1);
    }
    // –ø–æ Z-—Å—Ç–µ–Ω–∞–º
    for (let dz = 0; dz < depth; dz++) {
      await placeBlock(bot, material, x,             y + dy, z + dz);
      await placeBlock(bot, material, x + width - 1, y + dy, z + dz);
    }
  }

  bot.chat(`‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä–æ–±–∫–∞ ${width}√ó${height}√ó${depth} –∏–∑ ${material}`);
  log(bot, `–ö–æ—Ä–æ–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –∏–∑ ${material}`);
  return true;
}

module.exports = {
  prepareBuild,
  placeBlock,
  buildBox
};
