// models/MineCraft/library/skills/mining.js

const pf = require('mineflayer-pathfinder');
const { Movements, goals } = pf;
const { GoalBlock } = goals;
const { log } = require('../../utils/logger');
const world = require('../../world/structure_manager');
const { getBlockVariants } = require('../utils/blockHelper');
const { handleItem } = require('../utils/itemHelper');

/**
 * –≠–∫–∏–ø–∏—Ä—É–µ—Ç –µ–¥–∏–Ω–æ–∂–¥—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–¥ —Ç–∏–ø –±–ª–æ–∫–∞.
 * –ï—Å–ª–∏ –¥–ª—è —Ç–∏–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç null (–ª–æ–º–∞–µ–º —Ä—É–∫–æ–π).
 * @param {Bot} bot 
 * @param {string} blockType 
 * @returns {Promise<string|null>}
 */
async function ensureTool(bot, blockType) {
  const t = blockType.toLowerCase();
  let candidates;

  // 1) Wood
  if (t.includes('wood') || t.includes('log') || t.includes('plank')) {
    candidates = ['wooden_axe'];
  }
  // 2) Dirt / Sand / Gravel
  else if (['dirt','grass','sand','gravel','clay'].some(x => t.includes(x))) {
    candidates = ['wooden_shovel'];
  }
  // 3) Stone variants
  else if (['cobblestone','stone','andesite','diorite','granite','deepslate'].some(x => t.includes(x))) {
    candidates = ['stone_pickaxe'];
  }
  // 4) Ore blocks
  else if (t.endsWith('_ore') || ['coal','iron','gold','diamond','emerald','lapis','redstone'].includes(t)) {
    candidates = ['iron_pickaxe','diamond_pickaxe','netherite_pickaxe'];
  }
  // 5) Fallback ‚Äî –¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è –∫–∏—Ä–∫–∞
  else {
    candidates = ['wooden_pickaxe'];
  }

  for (const name of candidates) {
    const ok = await handleItem(bot, name, 1);
    if (ok) {
      const slot = bot.inventory.items().find(i => i.name === name);
      if (slot) {
        await bot.equip(slot, 'hand');
        log(bot, `üõ†Ô∏è –≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ${name}`);
        return name;
      }
    }
  }

  log(bot, `‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è ${blockType} –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ª–æ–º–∞—é —Ä—É–∫–æ–π`);
  return null;
}

/**
 * –°–æ–±–∏—Ä–∞–µ—Ç num –±–ª–æ–∫–æ–≤ —Ç–∏–ø–∞ blockType.
 * @param {Bot} bot 
 * @param {string} blockType 
 * @param {number} num 
 */
async function collectBlock(bot, blockType, num = 1) {
  if (num < 1) {
    log(bot, `Invalid number of blocks: ${num}`);
    return false;
  }

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º pathfinder-–ø–ª–∞–≥–∏–Ω (–¥–µ–ª–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑)
  bot.loadPlugin(pf.pathfinder);
  const tool = await ensureTool(bot, blockType);

  // 2) –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º pathfinder
  const mcData = require('minecraft-data')(bot.version);
  bot.pathfinder.setMovements(new Movements(bot, mcData));

  // 3) –¶–∏–∫–ª –ø–æ –¥–æ–±—ã—á–µ
  const variants = getBlockVariants(blockType);
  let collected = 0;

  for (let i = 0; i < num; i++) {
    const blocks = world.getNearestBlocks(bot, variants, 64);
    if (blocks.length === 0) {
      log(bot,
        collected === 0
          ? `–ù–µ—Ç –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ ${blockType} –¥–ª—è –¥–æ–±—ã—á–∏.`
          : `–î–æ–±—ã—Ç–æ ${collected}/${num} ${blockType}, –±–æ–ª—å—à–µ –Ω–µ—Ç.`);
      break;
    }

    const block = blocks[0];
    log(bot, `‚õèÔ∏è –ò–¥—É –∫ ${block.name} –Ω–∞ (${block.position.x},${block.position.y},${block.position.z})`);
    await bot.pathfinder.goto(new GoalBlock(block.position.x, block.position.y, block.position.z));

    try {
      await bot.dig(block);
      collected++;
      await bot.waitForTicks(10);
    } catch (err) {
      log(bot, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±—ã—á–µ ${block.name}: ${err.message}`);
      break;
    }
  }

  return collected > 0;
}

/**
 * –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã !collect
 */
async function collectItem(bot, item, amount = 1) {
  bot.chat(`‚åõ –î–æ–±—ã–≤–∞—é ${amount}√ó${item}‚Ä¶`);
  const ok = await collectBlock(bot, item, amount);
  bot.chat(ok
    ? `‚úÖ –î–æ–±—ã—Ç–æ ${amount}√ó${item}`
    : `‚ùå –ù–µ —Å–º–æ–≥ –¥–æ–±—ã—Ç—å ${item}`);
  return ok;
}

module.exports = { collectBlock, collectItem };