const fs   = require('fs');
const path = require('path');
const { log } = require('../../utils/logger');
const world = require('../../world/structure_manager');
const { handleItem } = require('../utils/itemHelper');
const { injectPathfinder } = require('../utils/navigation');
const mc = require('../utils/mcdata');

/**
 * –ö—Ä–∞—Ñ—Ç–∏—Ç itemName –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ quantity.
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±—ã–≤–∞–µ—Ç/–∫—Ä–∞—Ñ—Ç–∏—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.
 */
async function craftRecipe(bot, itemName, quantity = 1) {
  // 1) –ò—â–µ–º ID –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
  const id = mc.getItemId(itemName);
  if (id == null) {
    log(bot, `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞: ${itemName}`);
    return false;
  }
  let recipes;
  try {
    recipes = bot.recipesFor(id, null, quantity, null) || [];
  } catch {
    recipes = [];
  }
  if (recipes.length === 0) {
    log(bot, `üîç –†–µ—Ü–µ–ø—Ç –¥–ª—è ${itemName}√ó${quantity} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return false;
  }
  // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Ä–µ—Ü–µ–ø—Ç
  const recipe = recipes[0];

  log(bot, `üî® –°–∫—Ä–∞—Ñ—Ç–∏ÃÅ–≤–∞—é ${quantity}√ó${itemName} –ø–æ –ø–µ—Ä–≤–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É`);

  // 2) –î–æ—Å—Ç–∞—ë–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–µ—Ü–µ–ø—Ç–∞
  for (const comp of recipe.ingredients) {
    const compName = mc.itemsByName[comp.id]?.name;
    if (!compName) continue;
    const needed = comp.count * quantity;
    log(bot, `  ‚Üí –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é ${needed}√ó${compName}`);
    const ok = await handleItem(bot, compName, needed);
    if (!ok) {
      log(bot, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ${compName}`);
      return false;
    }
  }

  // 3) –ò—â–µ–º –∏–ª–∏ —Å—Ç–∞–≤–∏–º –≤–µ—Ä—Å—Ç–∞–∫ (crafting_table)
  let tableBlock = world.getNearestBlock(bot, 'crafting_table', 32);
  if (!tableBlock) {
    log(bot, 'üèóÔ∏è –í–µ—Ä—Å—Ç–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å—Ç–∞–≤–ª—é —Ä—è–¥–æ–º');
    const pos = bot.entity.position.floored().offset(2, 0, 0);
    await placeCraftingTable(bot, pos.x, pos.y, pos.z);
    tableBlock = world.getNearestBlock(bot, 'crafting_table', 32);
    if (!tableBlock) {
      log(bot, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤–µ—Ä—Å—Ç–∞–∫');
      return false;
    }
  }

  // 4) –ü–æ–¥—Ö–æ–¥–∏–º –∫ –≤–µ—Ä—Å—Ç–∞–∫—É –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
  injectPathfinder(bot);
  await bot.pathfinder.goto(new pf.goals.GoalBlock(
    tableBlock.position.x,
    tableBlock.position.y,
    tableBlock.position.z
  ));
  const craftingTable = await bot.openWorkbench(tableBlock);

  // 5) –î–µ–ª–∞–µ–º –∫—Ä–∞—Ñ—Ç
  try {
    await craftingTable.craft(recipe, quantity, 0);
    log(bot, `‚úÖ –°–∫—Ä–∞—Ñ—Ç–∏ÃÅ–ª ${quantity}√ó${itemName}`);
    craftingTable.close();
    return true;
  } catch (err) {
    log(bot, `‚ùå –û—à–∏–±–∫–∞ –∫—Ä–∞—Ñ—Ç–∞ ${itemName}: ${err.message}`);
    craftingTable.close();
    return false;
  }
}

/**
 * –°—Ç–∞–≤–∏—Ç –≤–µ—Ä—Å—Ç–∞–∫ –≤ —Ç–æ—á–∫–µ (x,y,z)
 */
async function placeCraftingTable(bot, x, y, z) {
  const { placeBlock } = require('./building');
  return await placeBlock(bot, 'crafting_table', x, y, z);
}

module.exports = { craftRecipe };
